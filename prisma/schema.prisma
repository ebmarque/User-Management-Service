// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(uuid())
    username String  @unique
    email    String? @unique
    password String?
    active   Boolean @default(true)

    twoFactorEnabled Boolean @default(false)
    twoFactorSecret  String? // Armazena base32 TOTP secret se 2FA ativo

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    friendshipsSent     Friendship[] @relation("SentRequests")
    friendshipsReceived Friendship[] @relation("ReceivedRequests")
    profile             Profile?
}

model Friendship {
    id          String @id @default(uuid())
    requester   User   @relation("SentRequests", fields: [requesterId], references: [id])
    requesterId String

    addressee   User   @relation("ReceivedRequests", fields: [addresseeId], references: [id])
    addresseeId String

    status    FriendshipStatus @default(PENDING)
    createdAt DateTime         @default(now())
    updateAt  DateTime         @updatedAt

    @@unique([requesterId, addresseeId]) // Evita duplicatas
    @@index([requesterId])
    @@index([addresseeId])
}

model Profile {
    id        String           @id @default(uuid())
    status    UserStatus       @default(OFFLINE)
    avatar    String?
    bio       String?
    gender    UserGender?
    nickName  String?          @unique
    firstName String?
    lastName  String?
    language  ProfileLanguage? @default(ENGLISH)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    user      User             @relation(fields: [userId], references: [id])
    userId    String           @unique
}

enum FriendshipStatus {
    PENDING
    ACCEPTED
    BLOCKED
    DECLINED
}

enum UserStatus {
    ONLINE
    OFFLINE
    IN_GAME
}

enum ProfileLanguage {
    ENGLISH
    PORTUGUESE
}

enum UserGender {
    MALE
    FEMALE
    OTHER
}
